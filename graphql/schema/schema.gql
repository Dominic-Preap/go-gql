type Query {
  x: Boolean!
}

type Mutation {
  x: Boolean!
}

scalar DateTime
scalar Any

# gqlgen ships with some builtin directives that make it a little easier to manage wiring.
# https://gqlgen.com/config/#inline-config-with-directives
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goField(forceResolver: Boolean, name: String) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

# Authorization via Custom Directives
# https://www.apollographql.com/docs/apollo-server/security/authentication/#authorization-via-custom-directives
directive @auth(role: Role) on OBJECT | FIELD_DEFINITION

enum Role {
  ADMIN
  USER
}

# TODO: Custom Validation Input Directives using go-playground/validator
# https://github.com/99designs/gqlgen/issues/1084
directive @validate(field: String!, rules: String! = "required") on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION

directive @requiredIf(field: String!, value: Any) on ARGUMENT_DEFINITION | INPUT_FIELD_DEFINITION
